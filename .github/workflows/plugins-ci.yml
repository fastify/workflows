name: Plugin CI

on:
  workflow_call:
    inputs:
      auto-merge-exclude:
        description: 'A comma separated list of packages that you do not want to be auto-merged.'
        required: false
        default: 'fastify'
        type: string
      database:
        description: 'Possible values: none, postgres, mongo, mysql, redis'
        required: false
        default: none
        type: string
      license-check:
        description: 'Check licenses'
        required: false
        type: boolean
        default: false
      license-check-allowed-additional:
        description: 'Additional allowed licenses (separator ;)'
        required: false
        type: string
        default: ''
      lint:
        description: 'Set to true to run linting scripts.'
        required: false
        default: false
        type: boolean

jobs:
  dependency-review:
    name: Dependency Review
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Dependency review
        uses: actions/dependency-review-action@v2

  license-check:
    if: >
      !failure() &&
      !cancelled() &&
      inputs.license-check == true
    name: Check Licenses
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: Check Licenses
        run: ${{ format('npx license-checker --production --onlyAllow="0BSD;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;MIT;{0}"', inputs.license-check-allowed-additional) }}

  linter:
    name: Lint Code
    if: >
      !failure() &&
      !cancelled() &&
      inputs.lint == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: Lint code
        run: npm run lint

  test:
    name: Test
    if: >
      !failure() &&
      !cancelled() &&
      inputs.database == 'none'
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [14, 16, 18]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: Run tests
        run: npm test

  test-postgres:
    if: >
      !failure() &&
      !cancelled() &&
      inputs.database == 'postgres'
    name: Node.js ${{ matrix.node-version }} - ${{ matrix.db }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [14, 16, 18]
        os: [ubuntu-latest]
        db: ['postgres:11-alpine']

    services:
      postgres:
        image: ${{ matrix.db }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: CI environment setup
        run: >
          npm i node-gyp 
          sudo apt-get install -yqq libpq-dev postgresql-client
          chmod 600 .pgpass
          PGPASSFILE=.pgpass psql -h localhost -p ${{
          job.services.postgres.ports[5432] }} -d postgres -c 'CREATE TABLE
          users(id serial PRIMARY KEY, username VARCHAR (50) NOT NULL);' -U
          postgres

      - name: Run tests
        run: npm test

  test-mongo:
    if: >
      !failure() &&
      !cancelled() &&
      inputs.database == 'mongo'
    name: Node.js ${{ matrix.node-version }} - ${{ matrix.db }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [14, 16, 18]
        os: [ubuntu-latest]
        db: ['mongo:5.0.0']

    services:
      mongo:
        image: ${{ matrix.db }}
        ports:
          - '27017:27017'

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: Run tests
        run: npm test

  test-mysql:
    if: >
      !failure() &&
      !cancelled() &&
      inputs.database == 'myssql'
    name: Node.js ${{ matrix.node-version }} - ${{ matrix.db }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [14, 16, 18]
        os: [ubuntu-latest]
        db: ['mysql:8.0']

    services:
      mysql:
        image: ${{ matrix.db }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: mysql
        ports:
          - '3306:3306'
        options: >-
          --health-cmd="mysqladmin ping" --health-interval=10s
          --health-timeout=5s --health-retries=3
  
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: Run tests
        run: npm test

  test-redis:
    if: >
      !failure() &&
      !cancelled() &&
      inputs.database == 'redis'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14, 16, 18]
        redis-tag: [5, 6, 7]
    services:
      redis:
        image: redis:${{ matrix.redis-tag }}
        ports:
          - '6379:6379'
        options: '--entrypoint redis-server'

    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm i --ignore-scripts

      - name: Run tests
        run: npm test

  automerge:
    name: Automerge Dependabot PRs
    if: >
        always() &&
        (needs.test.result == 'success' || needs.test.result == 'skipped') &&
        (needs.test-postgres.result == 'success' || needs.test-postgres.result == 'skipped') &&
        (needs.test-mongo.result == 'success' || needs.test-mongo.result == 'skipped') &&
        (needs.test-mysql.result == 'success' || needs.test-mysql.result == 'skipped') &&
        (needs.test-redis.result == 'success' || needs.test-redis.result == 'skipped') &&
        github.event_name == 'pull_request' &&
        github.event.pull_request.user.login == 'dependabot[bot]'
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: fastify/github-action-merge-dependabot@v3
        with:
          exclude: ${{ inputs.auto-merge-exclude }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: major
